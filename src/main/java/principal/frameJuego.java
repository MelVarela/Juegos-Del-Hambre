package principal;

import java.awt.*;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.*;
import javax.swing.tree.DefaultMutableTreeNode;

public class frameJuego extends javax.swing.JFrame {
    public frameJuego() {
        initComponents();
    }
    
    //Estas son las funciones que se usan para recibir datos.
    public void setJugadoresArena(ArrayList<Personaje> personajes){
        arena.setPersonajes(personajes);
    }
    
    public void setEquipos(ArrayList<Equipo> equipos){
        this.equipos = equipos;
    }
    
    public void setPersonajes(ArrayList<Personaje> personajes){
        this.personajes.addAll(personajes);
    }
    
    //Declaración de areas
    Area arena = new Area("Arena");
    Area bosque = new Area("Bosque");
    Area costa = new Area("Costa");
    
    //Declaración de variables
    int dia = 1;
    boolean sumar = false;
    boolean finalizado = false;
    
    ArrayList<Area> areas = new ArrayList<>();
    DefaultListModel muertos = new DefaultListModel();
    DefaultListModel muertosDelay = new DefaultListModel();
    ArrayList<Equipo> equipos = new ArrayList<>();
    ArrayList<Personaje> personajes = new ArrayList<>();
    
    Random alt = new Random();
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        mapa = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        jugadoresArea = new javax.swing.JList<>();
        conexiones = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaFallecidos = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        displayVictimas = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        areaEventos = new javax.swing.JTextArea();
        pasarDia = new javax.swing.JButton();
        labelDia = new javax.swing.JLabel();
        labelKillCount = new javax.swing.JLabel();
        causaMuerte = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1920, 1080));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        mapa.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        mapa.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Arena", "Bosque", "Costa" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        mapa.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mapaMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(mapa);

        jugadoresArea.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jugadoresArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jugadoresAreaMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jugadoresArea);

        conexiones.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        conexiones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conexionesActionPerformed(evt);
            }
        });

        listaFallecidos.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        listaFallecidos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listaFallecidosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(listaFallecidos);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Fallecidos:");

        displayVictimas.setEditable(false);
        displayVictimas.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        areaEventos.setEditable(false);
        areaEventos.setColumns(20);
        areaEventos.setFont(new java.awt.Font("Segoe UI", 0, 22)); // NOI18N
        areaEventos.setRows(5);
        areaEventos.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane4.setViewportView(areaEventos);

        pasarDia.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        pasarDia.setText("Pasar día");
        pasarDia.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pasarDiaMouseClicked(evt);
            }
        });

        labelDia.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        labelDia.setText("Inicio");

        labelKillCount.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        labelKillCount.setText("0");

        causaMuerte.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(conexiones)
                    .addComponent(jScrollPane3))
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelDia, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 1078, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(104, 104, 104)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel1)
                                .addGap(110, 110, 110))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(causaMuerte, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(displayVictimas)
                                    .addComponent(labelKillCount, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE))
                                .addGap(22, 22, 22))))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pasarDia)
                .addGap(871, 871, 871))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3))
                        .addGap(32, 32, 32)
                        .addComponent(conexiones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelKillCount)
                        .addGap(5, 5, 5)
                        .addComponent(displayVictimas, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(causaMuerte, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelDia)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 791, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(50, 50, 50)
                .addComponent(pasarDia)
                .addContainerGap(168, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void conexionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_conexionesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_conexionesActionPerformed

    private void mapaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mapaMouseClicked
        String selected = mapa.getSelectedValue();
        
        switch(selected){
            case "Arena" ->{
                String texto = "Conecta con:" + arena.getStringConexiones();
                conexiones.setText(texto);
                jugadoresArea.setModel(arena.devolverModeloJugadores());
            }
            case "Bosque" ->{
                String texto = "Conecta con:" + bosque.getStringConexiones();
                conexiones.setText(texto);
                jugadoresArea.setModel(bosque.devolverModeloJugadores());
            }
            case "Costa" ->{
                String texto = "Conecta con:" + costa.getStringConexiones();
                conexiones.setText(texto);
                jugadoresArea.setModel(costa.devolverModeloJugadores());
            }
        }
    }//GEN-LAST:event_mapaMouseClicked

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        
    }//GEN-LAST:event_formWindowActivated

    private void pasarDiaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pasarDiaMouseClicked
        accionFalse();
        int al = alt.nextInt(0, 100);
        for(int i = muertos.size(); i < muertosDelay.size(); i++){
            muertos.addElement(muertosDelay.get(i));
        }
        if(finalizado){
        	//Esto evita que la simulación prosiga con un único jugador.
            JOptionPane.showMessageDialog(rootPane, "La simulación ha finalizado");
        }else{
            areaEventos.setText("");
            /*
             * Primero, se comprueba que no se haya producido una condicion de victoria.
             * Después, si es necesario se pasa el dia, se actualiza el display de este, y se realizan los eventos.
             */
            if(!checkVictoria()){
                if(sumar){
                    dia++;
                    labelDia.setText(String.format("Dia %d", dia));
                    sumar = false;
                    if(al > 5){
                        ticDiurno();
                    }else{
                        ticEvento();
                    }
                }else{
                    sumar = true;
                    labelDia.setText(String.format("Noche %d", dia));
                    if(al > 5){
                        ticNocturno();
                    }else{
                        ticEvento();
                    }
                }
            }else{
                victoria();
            }
        }
    }//GEN-LAST:event_pasarDiaMouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        
        //Acciones que se realizan al abrir la ventana.
    	areas.add(arena);
        areas.add(bosque);
        areas.add(costa);
        
        arena.añadirConexion(bosque);
        arena.añadirConexion(costa);
        bosque.añadirConexion(arena);
        costa.añadirConexion(arena);
        
        asignarEventos();
        
        //Esto hace que si se inicia con un solo jugador, este gane automaticamente,
        if(checkVictoria()){
            victoria();
        }else{
            ticInicial();
        }
        listaFallecidos.setModel(muertos);
        
    }//GEN-LAST:event_formWindowOpened

    private void listaFallecidosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listaFallecidosMouseClicked
        Personaje pDisplay = getPersonaje(listaFallecidos.getSelectedValue());
        labelKillCount.setText(pDisplay.getKillCount());
        displayVictimas.setText(pDisplay.victimas.substring(4, pDisplay.victimas.length()));
    }//GEN-LAST:event_listaFallecidosMouseClicked

    private void jugadoresAreaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jugadoresAreaMouseClicked
        Personaje pDisplay = getPersonaje(jugadoresArea.getSelectedValue());
        labelKillCount.setText(pDisplay.getKillCount());
        displayVictimas.setText(pDisplay.victimas.substring(4, pDisplay.victimas.length()));
    }//GEN-LAST:event_jugadoresAreaMouseClicked

    
    private void ticDiurno(){
        String textoFinal = "";
        for (Area area : areas) {
            textoFinal += area.realizarEventos('D');
            for (Object muerto : area.darMuertos()) {
                muertosDelay.addElement(muerto);
                area.limpiarMuertos();
            }
        }
        areaEventos.setText(textoFinal);
    }
    
    private void ticNocturno(){
        String textoFinal = "";
        for (Area area : areas) {
            textoFinal += area.realizarEventos('N');
            for (Object muerto : area.darMuertos()) {
                muertosDelay.addElement(muerto);
                area.limpiarMuertos();
            }
        }
        areaEventos.setText(textoFinal);
    }
    
    private void ticInicial(){
        String textoFinal = "";
        for (Area area : areas) {
            textoFinal += area.realizarEventos('I');
            for (Object muerto : area.darMuertos()) {
                muertosDelay.addElement(muerto);
                area.limpiarMuertos();
            }
        }
        areaEventos.setText(textoFinal);
    }
    
    private void ticEvento(){
        System.out.println("Evento!");
        String textoFinal = "";
        int evR = alt.nextInt(1, 2);
        System.out.println(evR);
        switch(evR){
            case 1->{ //Evento pianos
                textoFinal += "¡Están cayendo pianos del cielo...! Por algún motivo.\n";
                for (Area area : areas) {
                    textoFinal += area.realizarEventos('P');
                    for (Object muerto : area.darMuertos()) {
                        muertosDelay.addElement(muerto);
                    area.limpiarMuertos();
                    }
                }
            }
        }
        areaEventos.setText(textoFinal);
    }
    
    private boolean checkVictoria(){
    	//Si detecta uno o menos jugadores, declara una victoria.
        int totalJug = 0;
        for (Area area : areas) {
            for (Personaje pers : area.jugadores) {
                totalJug++;
            }
        }
        if(totalJug > 1){
            return false;
        }else{
            return true;
        }
    }
    
    private Personaje getGanador(){
        for (Area area : areas) {
            if(!area.jugadores.isEmpty()) return area.jugadores.get(0);
        }
        return new Personaje("nadie");
    }
    
    private String getEquipo(Personaje personaje){
        String devolver = "de nadie";
        for (Equipo equipo : equipos) {
            if(equipo.getMiembros().contains(personaje)) devolver = equipo.nombre;
        }
        return devolver;
    }
    
    private void victoria(){
        Personaje ganador = getGanador();
        String equipo = getEquipo(ganador);
        String ganadorText = String.format("¡%s del equipo %s es el ganador!", ganador.nombre, equipo);
        areaEventos.setText(ganadorText);
        finalizado = true;
    }
    
    private void accionFalse(){
        for (Area area : areas) {
            for (Personaje personaje : area.jugadores){
                personaje.setAccion(false);
            }
        }
    }
    
    private Personaje getPersonaje(String nombre){
        for (Personaje personaje : personajes) {
            if(personaje.nombre.equals(nombre)) return personaje;
        }
        return null;
    }
    
    //Declaracion de eventos
    private void asignarEventos(){
    	//Esta funcion, pues... asigna eventos.
        arena.añadirEvento(new Evento('I', 1, 'O', "\n%s escapa de la arena inicial."));
        arena.añadirEvento(new Evento('I', 1, 'O', "\n%s busca, sin éxito, suministros en la arena inicial."));
        arena.añadirEvento(new Evento('I', 2, 'N', "\n%s es apuñalado por %s por la espalda."));
        arena.añadirEvento(new Evento('I', 2, 'O', "\n%s y %s hacen una pequeña tregua para escapar de la arena inicial juntos."));
        arena.añadirEvento(new Evento('I', 3, 'O', "\n%s, %s y %s se ignoran mutuamente para beneficio de todos."));
        arena.añadirEvento(new Evento('I',1,'O',"\n%s se tropieza intentando huir de la arena incial."));
        arena.añadirEvento(new Evento('I',1,'O',"\n%s busca y encuentra suministros en la arena inicial."));
        arena.añadirEvento(new Evento('I',1,'O',"\n%s encuentra un pequeño cuchillo en la arena inicial."));
        arena.añadirEvento(new Evento('I',1,'O',"\n%s encuentra armamento en la arena inicial."));
        arena.añadirEvento(new Evento('I',2,'O',"\n%s intenta huir, mientras que %s le persigue."));
        arena.añadirEvento(new Evento('I',2,'O',"\n%s huye de la arena, sin saber que %s lo está persiguiendo."));
        arena.añadirEvento(new Evento('I',3,'O',"\n%s, %s y %s se meten en una pelea, sin embargo, se dan cuenta de que no es el mejor\nmomento y se separan."));
        arena.añadirEvento(new Evento('I', 2, 'N', "\n%s come una manzana que le da %s, sin saber que estaba envenada con cianuro."));
        arena.añadirEvento(new Evento('I',1,'O',"\n%s agarra una pala."));
        arena.añadirEvento(new Evento('I',1,'O',"\n%s agarra una mochila y se va."));
        arena.añadirEvento(new Evento('I',2,'O',"\n%s y %s se pelean por una mochila de suministros, sin darse cuenta de que está vacia."));
        arena.añadirEvento(new Evento('I',2,'O',"\n%s y %s se pelean por una mochila de suministros."));
        arena.añadirEvento(new Evento('I',1,'O',"\n%s encuentra una cantimplora."));
        arena.añadirEvento(new Evento('I',1,'O',"\n%s pilla toda la comida que puede."));
        arena.añadirEvento(new Evento('I',2,'O',"\n%s le rompe la nariz a %s por un poco de comida."));
        arena.añadirEvento(new Evento('I',1,'O',"\n%s grita por ayuda."));
        arena.añadirEvento(new Evento('I', 1, 'N', "\n%s agarra una mochila, sin darse cuenta de que era una trampa bomba, y explota en mil pedazos."));
        arena.añadirEvento(new Evento('I', 3, 'T', "\n%s, %s y %s se pelean por una mochila, sin darse cuenta de que era una mochila bomba\nque los vuela a todos en mil pedazos."));
        arena.añadirEvento(new Evento('I', 4, 'T', "\n%s, %s, %s y %s se pelean por una mochila, sin darse cuenta de que era una mochila bomba\nque los vuela a todos en mil pedazos."));
        arena.añadirEvento(new Evento('I', 1, 'O', "\n%s agarra una pala."));
        arena.añadirEvento(new Evento('I', 1, 'O', "\n%s agarra un arco, unas flechas y un carcaj."));
        arena.añadirEvento(new Evento('I', 1, 'O', "\n%s pilla un puñado de cuchillos arrojadizos."));
        arena.añadirEvento(new Evento('I', 2, 'O', "\n%s le roba un cuchillo a %s."));
        arena.añadirEvento(new Evento('I', 1, 'O', "\n%s agarra una espada."));
        arena.añadirEvento(new Evento('I', 1, 'O', "\n%s agarra una lanza."));
        arena.añadirEvento(new Evento('I', 1, 'O', "\n%s encuentra una mochila llena de explosivos."));
        arena.añadirEvento(new Evento('I', 1, 'O', "\n%s agarra un kit de primeros auxilios y huye."));
        arena.añadirEvento(new Evento('I', 1, 'O', "\n%s agarra una hoz."));
        arena.añadirEvento(new Evento('I', 1, 'O', "\n%s huye con una botella de alcohol y un trapo."));
        arena.añadirEvento(new Evento('I', 1, 'O', "\n%s agarra un mechero y algo de cuerda."));
        arena.añadirEvento(new Evento('I', 1, 'O', "\n%s agarra material para pescar."));
        
        arena.añadirEvento(new Evento('D', 1, 'O', "\n%s patrulla la arena inicial."));
        arena.añadirEvento(new Evento('D', 1, 'O', "\n%s explora la arena incial."));
        arena.añadirEvento(new Evento('D', 1, 'O', "\n%s busca algo util entre lo que queda tras el saqueo inicial."));
        arena.añadirEvento(new Evento('D', 1, 'O', "\n%s encuentra comida en buen estado que nadie recogió durante el saqueo inicial."));
        arena.añadirEvento(new Evento('D', 2, 'O', "\n%s se encuentra por sorpresa a %s, pero se separan rápidamente."));
        arena.añadirEvento(new Evento('D', 2, 'N', "\n%s pensaba que ya no quedaba nadie en la arena inicial, pero %s le demuestra que se equivoca\ncon un par de puñaladas."));
        arena.añadirEvento(new Evento('D', 1, 'O', "\n%s encuentra una sarten."));
        arena.añadirEvento(new Evento('D', 1, 'O', "\n%s no tiene suerte buscando restos del saqueo inicial."));
        arena.añadirEvento(new Evento('N', 1, 'O', "\n%s decide pasar la noche en la arena inicial."));
        arena.añadirEvento(new Evento('N', 1, 'O', "\n%s pasa la noche en vela vigilando la arena inicial."));
        arena.añadirEvento(new Evento('N', 3, 'O', "\n%s, %s y %s se encuentran en la arena inicial, pero todos deciden que están demasiado cansados\npara pelear."));
        arena.añadirEvento(new Evento('N', 1, 'O', "\n%s duerme en el centro de la arena inicial, con la esperanza de que nadie le vea."));
        arena.añadirEvento(new Evento('N', 1, 'O', "\nA %s le hubiera gustado pasar la noche fuera de la arena inicial, pero no le dio tiempo a escapar."));
        arena.añadirEvento(new Evento('N', 1, 'O', "\n%s se queda dormido mirando los aviones que pasan por encima de la arena inicial."));
        arena.añadirEvento(new Evento('N', 1, 'O', "\n%s se pasa toda la noche intentando emboscar a una linterna que vio en la distancia, sin darse\ncuenta de que era una farola."));
        arena.añadirEvento(new Evento('D', 2, 'N', "\n%s es golpeado en la cabeza con una sarten por %s"));
        arena.añadirEvento(new Evento('D', 1, 'O', "\n%s se encuentra una sarten que alguien había tirado."));
        arena.añadirEvento(new Evento('D', 1, 'O', "\n%s tira una sarten que tenía por algún motivo."));
        arena.añadirEvento(new Evento('N', 1, 'O', "\n%s duerme en el cemento de la arena inicial."));
        arena.añadirEvento(new Evento('N', 1, 'N', "\n%s intenta subirse a una farola para ver mejor, pero se cae y muere."));
        arena.añadirEvento(new Evento('D', 3, 'S', "\n%s, %s y %s se meten en una pelea. El primero de ellos gana, y mata a los otros dos."));
        arena.añadirEvento(new Evento('D', 2, 'O', "\n%s le atiende las heridas a %s."));
        arena.añadirEvento(new Evento('D',3 ,'O', "\n%s escucha a %s y %s hablando en la distancia."));
        arena.añadirEvento(new Evento('D', 2, 'O', "\n%s y %s se separan para buscar recursos."));
        
        bosque.añadirEvento(new Evento('D', 1, 'O', "\n%s busca suministros en el bosque."));
        bosque.añadirEvento(new Evento('D', 1, 'O', "\n%s recoge frutos del bosque."));
        bosque.añadirEvento(new Evento('D', 1, 'O', "\n%s recoge fruta de un arbol."));
        bosque.añadirEvento(new Evento('N', 1, 'O', "\n%s duerme en una cueva."));
        bosque.añadirEvento(new Evento('N', 1, 'O', "\n%s sube a un arbol para dormir."));
        bosque.añadirEvento(new Evento('D',1,'O',"\n%s recoje musgo."));
        bosque.añadirEvento(new Evento('D',1,'O',"\n%s caza conejos."));
        bosque.añadirEvento(new Evento('D',1,'O',"\n%s se cae a un río."));
        bosque.añadirEvento(new Evento('D',2,'O',"\n%s es atacado por un oso, pero %s le ayuda a huir."));
        bosque.añadirEvento(new Evento('D', 2, 'N', "\n%s es atacado por un oso, y cuando está huyendo %s le pone la zancadilla."));
        bosque.añadirEvento(new Evento('N', 2, 'O', "\n%s le roba las cosas a %s mientras duerme."));
        bosque.añadirEvento(new Evento('D', 1, 'O', "\n%s se va de caza."));
        bosque.añadirEvento(new Evento('D',1,'O',"\n%s descubre una cueva."));
        bosque.añadirEvento(new Evento('D', 1, 'N', "\n%s muere arroyado por un jabalí."));
        bosque.añadirEvento(new Evento('N', 2, 'O', "\n%s deja a %s entrar en su tienda de campaña."));
        bosque.añadirEvento(new Evento('D', 1, 'O', "\n%s recoge setas."));
        bosque.añadirEvento(new Evento('D', 1, 'N', "\n%s recoge setas, sin darse cuenta de que son venenosas."));
        bosque.añadirEvento(new Evento('N', 4, 'O', "\n%s, %s, %s y %s cuentan historias de terror alrededor del fuego."));
        bosque.añadirEvento(new Evento('D', 1, 'O',"\n%s se esconde en los arbustos."));
        bosque.añadirEvento(new Evento('D', 1, 'O', "\n%s practica su arquería."));
        bosque.añadirEvento(new Evento('D', 1, 'O', "\n%s se pincha mientras recoge bayas."));
        bosque.añadirEvento(new Evento('D', 1, 'O', "\n%s busca leña para hacer un fuego."));
        bosque.añadirEvento(new Evento('D', 1, 'O', "\n%s intenta pescar, pero se cae al río."));
        bosque.añadirEvento(new Evento('D', 1, 'O', "\n%s recoge flores."));
        
        costa.añadirEvento(new Evento('D', 1, 'O', "\n%s se baña en el mar."));
        costa.añadirEvento(new Evento('D', 2, 'N', "\n%s cae en la trampa de confiar en %s, y muere ahogado."));
        costa.añadirEvento(new Evento('N', 1, 'O', "\n%s hace una hoguera con corteza de palmera."));
        costa.añadirEvento(new Evento('N', 1, 'O', "\n%s mira las estrellas mientras escucha el oleaje."));
        costa.añadirEvento(new Evento('D', 1, 'O', "\n%s da un paseo por la playa."));
        costa.añadirEvento(new Evento('D', 1, 'O', "\n%s se lava las heridas con agua de mar."));
        costa.añadirEvento(new Evento('D', 1, 'O', "\n%s hierve agua para obtener agua potable."));
        costa.añadirEvento(new Evento('D', 2, 'O', "\n%s construye un castillo de arena para distraerse de los horrores del capitalismo."));
        costa.añadirEvento(new Evento('D',1,'O',"\n%s pesca."));
        costa.añadirEvento(new Evento('N', 2, 'O', "\n%s y %s hacen una tregua y hablan sobre las personas que quedan con vida."));
        costa.añadirEvento(new Evento('D', 1, 'N', "\n%s pisa un pez roca y muere."));
        costa.añadirEvento(new Evento('D', 1, 'O', "\n%s construye una cabaña."));
        costa.añadirEvento(new Evento('D', 2, 'O', "\n%s y %s construyen una cabaña juntos."));
        costa.añadirEvento(new Evento('D', 1, 'O', "\n%s pesca con un tridente."));
        costa.añadirEvento(new Evento('D', 1, 'O', "\n%s recoge conchas."));
        costa.añadirEvento(new Evento('D', 1, 'O', "\n%s ve humo en la distancia, pero decide no investigar."));
        costa.añadirEvento(new Evento('N', 1, 'O', "\n%s ve una hoguera en la distancia, pero decide no investigar."));
        costa.añadirEvento(new Evento('N', 1, 'O', "\n%s se maravilla con el reflejo de la luna en el mar."));
        
        //Eventos universales
        arena.añadirEvento(new Evento('U', 2, 'O', "\n%s le ruega a %s que le mate, pero este se niega."));
        bosque.añadirEvento(new Evento('U', 2, 'O', "\n%s le ruega a %s que le mate, pero este se niega."));
        costa.añadirEvento(new Evento('U', 2, 'O', "\n%s le ruega a %s que le mate, pero este se niega."));
        
        arena.añadirEvento(new Evento('U', 2, 'N', "\n%s le ruega a %s que le mate, y este acepta."));
        bosque.añadirEvento(new Evento('U', 2, 'N', "\n%s le ruega a %s que le mate, y este acepta."));
        costa.añadirEvento(new Evento('U', 2, 'N', "\n%s le ruega a %s que le mate, y este acepta."));
        
        arena.añadirEvento(new Evento('U', 1, 'N', "\n%s decide que no merece la pena seguir luchando y se suicida."));
        bosque.añadirEvento(new Evento('U', 1, 'N', "\n%s decide que no merece la pena seguir luchando y se suicida."));
        costa.añadirEvento(new Evento('U', 1, 'N', "\n%s decide que no merece la pena seguir luchando y se suicida."));
        
        arena.añadirEvento(new Evento('U', 1, 'O', "\n%s se autolesiona."));
        bosque.añadirEvento(new Evento('U', 1, 'O', "\n%s se autolesiona."));
        costa.añadirEvento(new Evento('U', 1, 'O', "\n%s se autolesiona."));
        
        arena.añadirEvento(new Evento('U', 1, 'O', "\n%s piensa sobre su hogar."));
        bosque.añadirEvento(new Evento('U', 1, 'O', "\n%s piensa sobre su hogar."));
        costa.añadirEvento(new Evento('U', 1, 'O', "\n%s piensa sobre su hogar."));
        
        arena.añadirEvento(new Evento('U', 1, 'O', "\n%s piensa sobre ganar."));
        bosque.añadirEvento(new Evento('U', 1, 'O', "\n%s piensa sobre ganar."));
        costa.añadirEvento(new Evento('U', 1, 'O', "\n%s piensa sobre ganar."));
        
        //Eventos semi-universales
        arena.añadirEvento(new Evento('N', 2, 'O', "\n%s deja a %s entrar en su refugio."));
        arena.añadirEvento(new Evento('N', 2, 'O', "\n%s y %s duermen juntos."));
        arena.añadirEvento(new Evento('D', 2, 'O', "\n%s y %s trabajan juntos durante todo el día."));
        arena.añadirEvento(new Evento('D', 1, 'O', "\n%s intenta dormir durante todo el día, pero no lo consigue."));
        arena.añadirEvento(new Evento('D', 1, 'O', "\n%s duerme durante todo el día."));
        
        bosque.añadirEvento(new Evento('N', 2, 'O', "\n%s deja a %s entrar en su refugio."));
        bosque.añadirEvento(new Evento('N', 2, 'O', "\n%s y %s duermen juntos."));
        bosque.añadirEvento(new Evento('D', 2, 'O', "\n%s y %s trabajan juntos durante todo el día."));
        bosque.añadirEvento(new Evento('D', 1, 'O', "\n%s intenta dormir durante todo el día, pero no lo consigue."));
        bosque.añadirEvento(new Evento('D', 1, 'O', "\n%s duerme durante todo el día."));
        
        costa.añadirEvento(new Evento('N', 2, 'O', "\n%s deja a %s entrar en su refugio."));
        costa.añadirEvento(new Evento('N', 2, 'O', "\n%s y %s duermen juntos."));
        costa.añadirEvento(new Evento('D', 2, 'O', "\n%s y %s trabajan juntos durante todo el día."));
        costa.añadirEvento(new Evento('D', 1, 'O', "\n%s intenta dormir durante todo el día, pero no lo consigue."));
        costa.añadirEvento(new Evento('D', 1, 'O', "\n%s duerme durante todo el día."));
        
        //Pianos
        arena.añadirEvento(new Evento('P', 1, 'O', "\n%s consigue evitar los pianos."));
        arena.añadirEvento(new Evento('P', 1, 'O', "\n%s evita un piano por los pelos."));
        arena.añadirEvento(new Evento('P', 1, 'O', "\nA %s le cae un piano en la cabeza, pero por suerte era un piano de juguete."));
        arena.añadirEvento(new Evento('P', 1, 'N', "\n%s no consigue evitar los pianos, y le cae uno de cola en la cabeza."));
        arena.añadirEvento(new Evento('P', 1, 'N', "\nCuando %s pensaba que había sobrevivido, le cae un órgano en la cabeza."));
        arena.añadirEvento(new Evento('P', 2, 'S', "\n%s aprovecha para dejar inmovilizado a %s, a quien le cae un piano gigante en la cabeza."));
        
        bosque.añadirEvento(new Evento('P', 1, 'O', "\n%s consigue evitar los pianos."));
        bosque.añadirEvento(new Evento('P', 1, 'O', "\n%s evita un piano por los pelos."));
        bosque.añadirEvento(new Evento('P', 1, 'O', "\nA %s le cae un piano en la cabeza, pero por suerte era un piano de juguete."));
        bosque.añadirEvento(new Evento('P', 1, 'O', "\n%s consigue evitar los pianos metiendose en una cueva."));
        bosque.añadirEvento(new Evento('P', 1, 'N', "\n%s no consigue evitar los pianos, y le cae uno de cola en la cabeza."));
        bosque.añadirEvento(new Evento('P', 1, 'N', "\nCuando %s pensaba que había sobrevivido, le cae un órgano en la cabeza."));
        bosque.añadirEvento(new Evento('P', 2, 'S', "\n%s aprovecha para dejar inmovilizado a %s, a quien le cae un piano gigante en la cabeza."));
        
        costa.añadirEvento(new Evento('P', 1, 'O', "\n%s consigue evitar los pianos."));
        costa.añadirEvento(new Evento('P', 1, 'O', "\n%s evita un piano por los pelos."));
        costa.añadirEvento(new Evento('P', 1, 'O', "\nA %s le cae un piano en la cabeza, pero por suerte era un piano de juguete."));
        costa.añadirEvento(new Evento('P', 1, 'O', "\n%s consigue evitar los pianos sumergiendose en el mar."));
        costa.añadirEvento(new Evento('P', 1, 'N', "\n%s no consigue evitar los pianos, y le cae uno de cola en la cabeza."));
        costa.añadirEvento(new Evento('P', 1, 'N', "\nCuando %s pensaba que había sobrevivido, le cae un órgano en la cabeza."));
        costa.añadirEvento(new Evento('P', 2, 'S', "\n%s aprovecha para dejar inmovilizado a %s, a quien le cae un piano gigante en la cabeza."));
        
    }
	
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frameJuego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frameJuego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frameJuego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frameJuego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frameJuego().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea areaEventos;
    private javax.swing.JTextField causaMuerte;
    private javax.swing.JTextField conexiones;
    private javax.swing.JTextField displayVictimas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JList<String> jugadoresArea;
    private javax.swing.JLabel labelDia;
    private javax.swing.JLabel labelKillCount;
    private javax.swing.JList<String> listaFallecidos;
    private javax.swing.JList<String> mapa;
    private javax.swing.JButton pasarDia;
    // End of variables declaration//GEN-END:variables
}
